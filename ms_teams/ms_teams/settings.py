"""
Django settings for ms_teams project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

with open('app.yaml') as f:
    import yaml
    cfg = yaml.safe_load(f)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b9807p5++2ky()v7r1eyowt&21pcs6s-n@73_5cw$g+t4z3co('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'app',
    'api',
    'corsheaders'
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.middleware.backend.JWTAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'api.middleware.backend.JWTAuthentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]


CORS_ALLOWED_ORIGINS = [
    "https://example.com",
    "https://sub.example.com",
    "http://localhost:8080",
    "https://www.google.com",
    "http://127.0.0.1:9000"
]

# CORS_ORIGIN_ALLOW_ALL = True


CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

ROOT_URLCONF = 'ms_teams.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ms_teams.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": cfg['DB_ENGINE'],
        "NAME": cfg['DB_NAME'],
        "USER": cfg['DB_USER'],
        "PASSWORD": cfg['DB_PASS'],
        "HOST": cfg['DB_HOST'],
        "PORT": cfg['DB_PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'app': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': "app_debug.log",
        },
        'rabbitmq': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': "rabbitmq_debug.log",
        },
    },
    'loggers': {
        'manuscript': {
            'handlers': ['app'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'rabbitmq': {
            'handlers': ['rabbitmq'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# RabbitMQ settings
# or the hostname where RabbitMQ is running
RABBITMQ_HOST = cfg['RABBITMQ_HOST']
RABBITMQ_PORT = cfg['RABBITMQ_PORT']  # default RabbitMQ port
RABBITMQ_VHOST = cfg['RABBITMQ_VHOST']  # default virtual host
RABBITMQ_USER = cfg['RABBITMQ_USER']  # default RabbitMQ username
RABBITMQ_PASSWORD = cfg['RABBITMQ_PASSWORD']  # default RabbitMQ password
RABBITMQ_EXCHANGE_NAME = cfg['RABBITMQ_EXCHANGE_NAME']
RABBITMQ_QUEUE = cfg['RABBITMQ_QUEUE']

RABBITMQ_TEST_HOST = cfg['RABBITMQ_TEST_HOST']
RABBITMQ_TEST_PORT = cfg['RABBITMQ_TEST_PORT']
RABBITMQ_TEST_VHOST = cfg['RABBITMQ_TEST_VHOST']
RABBITMQ_TEST_USER = cfg['RABBITMQ_TEST_USER']
RABBITMQ_TEST_PASSWORD = cfg['RABBITMQ_TEST_PASSWORD']
RABBITMQ_TEST_EXCHANGE_NAME = cfg['RABBITMQ_TEST_EXCHANGE_NAME']
RABBITMQ_TEST_QUEUE = cfg['RABBITMQ_TEST_QUEUE']

RABBITMQ_QUEUE_USER_CREATED = cfg['RABBITMQ_QUEUE_USER_CREATED']
RABBITMQ_QUEUE_EVENT_EDIT = cfg['RABBITMQ_QUEUE_EVENT_EDIT']
RABBITMQ_QUEUE_EVENT_CREATE = cfg['RABBITMQ_QUEUE_EVENT_CREATE']

RABBITMQ_USER_CREATE_ROUTING_KEY = cfg['RABBITMQ_USER_CREATE_ROUTING_KEY']
RABBITMQ_EVENT_CREATE_ROUTING_KEY = cfg['RABBITMQ_EVENT_CREATE_ROUTING_KEY']
RABBITMQ_EVENT_EDIT_ROUTING_KEY = cfg['RABBITMQ_EVENT_EDIT_ROUTING_KEY']
RABBITMQ_USER_KICKED_FROM_TEAM_ROUTING_KEY = cfg['RABBITMQ_USER_KICKED_FROM_TEAM_ROUTING_KEY']
RABBITMQ_USER_LEFT_FROM_TEAM_ROUTING_KEY = cfg['RABBITMQ_USER_LEFT_FROM_TEAM_ROUTING_KEY']
RABBITMQ_USER_JOIN_REQUEST_ROUTING_KEY = cfg['RABBITMQ_USER_JOIN_REQUEST_ROUTING_KEY']
RABBITMQ_USER_JOIN_REQUEST_UPDATED_ROUTING_KEY = cfg[
    'RABBITMQ_USER_JOIN_REQUEST_UPDATED_ROUTING_KEY']


# RabbitMQ connection URL
RABBITMQ_CONNECTION_URL = f'amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@{RABBITMQ_HOST}:{RABBITMQ_PORT}'
